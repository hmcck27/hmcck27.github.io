<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://hmcck27.github.io/</id><title>개복치의 개발 블로그</title><subtitle>개발자 최진규의 기술 블로그입니다.</subtitle> <updated>2022-04-24T20:53:45+08:00</updated> <author> <name>Choi Jin Kyu</name> <uri>https://hmcck27.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://hmcck27.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://hmcck27.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 Choi Jin Kyu </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Spring bean 중복 해결(2)</title><link href="https://hmcck27.github.io/posts/Spring-Bean-%EC%A4%91%EB%B3%B5-%ED%95%B4%EA%B2%B0(2)/" rel="alternate" type="text/html" title="Spring bean 중복 해결(2)" /><published>2022-04-15T00:00:00+08:00</published> <updated>2022-04-15T00:00:00+08:00</updated> <id>https://hmcck27.github.io/posts/Spring-Bean-%EC%A4%91%EB%B3%B5-%ED%95%B4%EA%B2%B0(2)/</id> <content src="https://hmcck27.github.io/posts/Spring-Bean-%EC%A4%91%EB%B3%B5-%ED%95%B4%EA%B2%B0(2)/" /> <author> <name>Choi Jin Kyu</name> </author> <summary> Spring Bean 중복 해결 (2) 앞서서 spring bean이 중복되는 상황 해결을 위한 여러가지 방법에 대해서 알아보았다. @Autowired의 필드명 매칭 @Autowired의 생성자 파라미터 매칭 @Qualifier 사용 @Qualifier와 @Primary 사용 결국 우리가 유용하게 사용하게 되는 방법은 3번과 4번이다. 직접 빈 네임 이외에도 빈을 구분하는 구분자를 추가로 만들어주기 때문에, 더욱 자유도가 높다고 할 수 있다. 예를 들어서 1,2번은 직접 생성자나 변수 선언의 코드를 건드리지만, 3번과 4번은 코드 수정에서 조금 더 자유롭기 때문이다. 하지만 3번 4번을 사용하게 되면 하나의 문제점이 존재한다. 바로 빈의 구분자를 string으로 선언하기 때문... </summary> </entry> <entry><title>Spring bean scope</title><link href="https://hmcck27.github.io/posts/spring-bean-scope/" rel="alternate" type="text/html" title="Spring bean scope" /><published>2022-04-11T00:00:00+08:00</published> <updated>2022-04-11T00:00:00+08:00</updated> <id>https://hmcck27.github.io/posts/spring-bean-scope/</id> <content src="https://hmcck27.github.io/posts/spring-bean-scope/" /> <author> <name>Choi Jin Kyu</name> </author> <summary> Spring bean Scope 이전 ioc에 대해 알아보면서 간단하게 scope가 뭔지, 어떤 종류가 있는지 알아보았다. 좀 더 자세하게 정리해보자 !! 가장 먼저 bean의 scope는 다음과 같다. Singleton prototype request session 우리가 가장 흔하게 사용하는 scope는 당연히 singleton이다. 아무런 설정을 하지 않으면 spring은 자동으로 bean을 singleton으로 생성, 관리한다. 하지만 우리가 명시적으로 scope를 지정할 수도 있다. 다음과 같은 방식이다. @Scope("prototype") @Component public class HelloBean { } 만약 component scan을 사용한다면, bean... </summary> </entry> <entry><title>Bean 생명주기 콜백</title><link href="https://hmcck27.github.io/posts/Bean-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0-%EC%BD%9C%EB%B0%B1/" rel="alternate" type="text/html" title="Bean 생명주기 콜백" /><published>2022-04-10T00:00:00+08:00</published> <updated>2022-04-10T00:00:00+08:00</updated> <id>https://hmcck27.github.io/posts/Bean-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0-%EC%BD%9C%EB%B0%B1/</id> <content src="https://hmcck27.github.io/posts/Bean-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0-%EC%BD%9C%EB%B0%B1/" /> <author> <name>Choi Jin Kyu</name> </author> <summary> Bean 생명주기 call back 지금까지 spring bean을 생성하고, 어떻게 spring이 이 bean을 각자의 의존관계에 맞춰서 주입했는지 알아봤다. 하지만 spring bean도 생명주기가 있다. 예를 들어서 DBCP나 socket같이 application이 사용할 것들을 미리 만들어두고 application이 종료되는 시점에 안전하게 없에듯이 spring bean또한 이런 생명에서 소멸로 이어지는 life cycle이 있다. 먼저 간단하게 life cycle을 훑어보자. 아 참고로, 이 빈의 life cycle은 singleton bean인 경우에만 적용된다. 만약에 singleton bean이 아닌 경우, prototype 등등. 이런경우는 다른 생명주기가 적용된다. spri... </summary> </entry> <entry><title>Http https</title><link href="https://hmcck27.github.io/posts/http-https/" rel="alternate" type="text/html" title="Http https" /><published>2022-04-08T00:00:00+08:00</published> <updated>2022-04-08T00:00:00+08:00</updated> <id>https://hmcck27.github.io/posts/http-https/</id> <content src="https://hmcck27.github.io/posts/http-https/" /> <author> <name>Choi Jin Kyu</name> </author> <summary> Http와 Https의 차이 이번에 한번 http와 https의 차이를 정리해보자 ! Http란 ? Hyper Text Transfer Protocol http는 클라이언트/서버의 데이터를 주고받기 위한 프로토콜이다. application layer(tcp/ip위의)에서 적용되는 프로토콜이다. 특징 80번 포트 사용 stateless하다 비암호화 구조 Method : GET / POST / PUT / DELETE Path : / /student version of protocol : HTTP/1.1 HTTP2 하지만 http는 암호화되지 않은 평문이다. 데이터를 담아서 전송하면 제 3자가 조회가 가능하다. Https란 ? Hyper Text Trans... </summary> </entry> <entry><title>Context switching</title><link href="https://hmcck27.github.io/posts/context-switching/" rel="alternate" type="text/html" title="Context switching" /><published>2022-04-08T00:00:00+08:00</published> <updated>2022-04-08T00:00:00+08:00</updated> <id>https://hmcck27.github.io/posts/context-switching/</id> <content src="https://hmcck27.github.io/posts/context-switching/" /> <author> <name>Choi Jin Kyu</name> </author> <summary> Context Switching 컴퓨터는 동시에 하나만 할 수 있다 ! 하지만 실제로 사용하다보면 유저입장에서는 동시에 여러 task들이 처리되고 있는것 처럼 느껴진다. 그렇게 느껴지는 이유가 바로 context switching이다. 컴퓨터는 여러 프로세스를 갖고 있고, 프로세스는 여러 thread를 갖고 있다. 이걸 바로 멀티 프로세스 환경이라고 하는데, 문제는 cpu는 하나의 프로세스만 실행가능하다. 중간에 interupt라는 요청에 의해서 cpu는 계속해서 실행하고 있는 process를 교체하게 된다. 즉 우리에게 여러가지가 동시에 일어나고 있는것 처럼 보이지만 실제로는 cpu가 실행하고 있는 작업이 눈치채지 못할만큼 빠른 속도로 작업들을 교체하면서 실행하고 있는 것이다. 이 교체의... </summary> </entry> </feed>
